{"version":3,"sources":["components/Sidebar.js","components/FormWeather.js","components/Error.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","props","react_default","a","createElement","className","src","alt","title","description","FormWeather","cityRef","React","createRef","countryRef","searchWeather","e","preventDefault","response","city","_this","current","value","country","dataResponse","onSubmit","this","id","ref","type","placeholder","Component","Error","message","Weather","showData","_this$props$datarespo","dataresponse","name","sys","main","weather","temp","toFixed","humidity","App","state","error","query","result","apiQuery","_this$state$query","getUrl","concat","fetch","then","json","data","setState","catch","console","log","prevProps","prevState","printResponse","components_Error","components_Weather","components_Sidebar","components_FormWeather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.271aa4c6.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Sidebar = (props) => {\n    return(\n        <div className='content'>\n            <img className=\"logo\" src='https://www.edrans.com/themes/custom/edrans_theme/images/marca-negro.png' alt='Edrans'/>\n            <h1 className=\"title\">\n                {props.title}\n            </h1>\n            <p className=\"description\">\n                {props.description}\n            </p>\n        </div>\n    )\n}\n\nSidebar.propTypes = {\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired\n}\n\nexport default Sidebar\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass FormWeather extends Component {\n    cityRef = React.createRef()\n    countryRef = React.createRef()\n\n    searchWeather = (e) => {\n        e.preventDefault()\n        const response = {\n            city: this.cityRef.current.value,\n            country: this.countryRef.current.value\n        }\n        this.props.dataResponse(response)\n    }\n\n    render(){\n        return(\n            <form className='form-weather' onSubmit={this.searchWeather}>\n                <input id='city' ref={this.cityRef} type='text' placeholder='Insert city...' />\n                <input id='country' ref={this.countryRef} type='text' placeholder='Insert country...' />\n                <input type='submit' id='submit' value='serch weather' />\n            </form>\n        )\n    }\n}\n\nFormWeather.propTypes = {\n    dataResponse: PropTypes.func.isRequired\n}\n\nexport default FormWeather\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Error = (props) => {\n    return(\n        <div className='error'>\n            <p>\n                { props.message }\n            </p>\n        </div>\n    )\n}\n\nError.propTypes = {\n    message: PropTypes.string.isRequired\n}\n\nexport default Error\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Weather extends Component {\n    showData = () => {\n        const { name, sys, main, weather } = this.props.dataresponse\n        const kelvin = 273.15\n        if( !name || !sys || !main || !weather ) return null\n\n        return(\n            <div className=\"weather\">\n                <span className=\"item\">\n                    <b>Location:</b> {name},{sys.country}\n                </span>\n                <span className=\"item\">\n                    <b>Temperature:</b> {(main.temp - kelvin).toFixed(2)} &deg;C\n                </span>\n                <span className=\"item\">\n                    <b>Humidity:</b> {main.humidity}%\n                </span>\n                <span className=\"item\">\n                    <b>Conditions:</b> {weather[0].description}\n                </span>\n            </div>\n        )\n    }\n    render(){\n        return(\n            <div>\n                {this.showData()}\n            </div>\n        )\n    }\n}\n\nWeather.propTypes = {\n    dataresponse: PropTypes.object.isRequired\n}\n\nexport default Weather\n","import React, { Component } from 'react';\nimport './css/main.css';\nimport Sidebar from './components/Sidebar.js'\nimport FormWeather from './components/FormWeather.js'\nimport Error from './components/Error.js'\nimport Weather from './components/Weather.js'\n\nclass App extends Component {\n\n    state = {\n        error: '',\n        query: {},\n        result: {}\n    }\n\n    componentDidMount(){\n        this.setState({\n            error: false\n        })\n    }\n    componentDidUpdate(prevProps, prevState){\n        if( prevState.query !== this.state.query ) {\n            this.apiQuery()\n        }\n    }\n\n    apiQuery = () => {\n        const { city, country } = this.state.query\n        if( !city || !country ) return null\n\n        const appId = '657fcea32def94dc2e8bf0610b743698'\n        const apiUrl = 'http://api.openweathermap.org/data/2.5/weather?'\n        let getUrl = `${apiUrl}q=${city},${country}&APPID=${appId}`\n\n        fetch(getUrl)\n            .then(response => {\n                return response.json()\n            })\n            .then(data => {\n                this.setState({\n                    result: data\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    dataResponse = response => {\n        console.log(response)\n        if ( response.city === '' || response.country ==='') {\n            this.setState({\n                error: true\n            })\n        }else{\n            this.setState({\n                error: false,\n                query: response\n            })\n        }\n    }\n\n    render() {\n        const error = this.state.error\n        let printResponse\n\n        if(error){\n            printResponse = <Error message='Please, complete city and country'/>\n        }else{\n            printResponse = <Weather dataresponse={this.state.result} />\n        }\n\n        return (\n            <div className=\"App\">\n                <div className=\"sidebar flex\">\n                    <Sidebar\n                        title='Weather Finder'\n                        description='Find out the temperatura, Weather conditions and more...'\n                    />\n                </div>\n                <div className=\"content-weather flex\">\n                    <div className=\"content\">\n                        <FormWeather\n                            dataResponse={this.dataResponse}\n                            />\n                        {printResponse}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}